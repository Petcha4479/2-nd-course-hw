// –ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ
function firstGame () {
    function guessNumberGame() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        const secretNumber = Math.floor(Math.random() * 100) + 1;
        let attempts = 0;
        let userGuess;

        alert('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!');

        do {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ
            userGuess = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–≥–∞–¥–∫—É (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100):');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏ (–Ω–∞–∂–∞–ª Cancel)
            if (userGuess === null) {
                alert(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${secretNumber}`);
                return;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            userGuess = Number(userGuess);

            if (isNaN(userGuess)) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
                continue;
            }

            if (userGuess < 1 || userGuess > 100) {
                alert('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!');
                continue;
            }

            attempts++;

            // –î–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            if (userGuess < secretNumber) {
                alert('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!');
            } else if (userGuess > secretNumber) {
                alert('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!');
            }

        } while (userGuess !== secretNumber);

        // –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π
        alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${secretNumber} –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
    }
    guessNumberGame();
}

// –ò–≥—Ä–∞ –ü—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
function secondGame () {
    function generateMathProblem() {
        const operations = ['+', '-', '*', '/'];
        const operation = operations[Math.floor(Math.random() * operations.length)];

        let num1, num2, answer;

        if (operation === '+') {
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = num1 + num2;
        } else if (operation === '-') {
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = num1 - num2;
        } else if (operation === '*') {
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 5) + 1;
            answer = num1 * num2;
        } else if (operation === '/') {
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = Math.floor(Math.random() * 10) + 1;
            num1 = num2 * answer;
        }

        return {
            question: `–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${num1} ${operation} ${num2}?`,
            correctAnswer: answer
        };
    }

    function startMathQuiz() {
        const problem = generateMathProblem();
        const userAnswer = parseFloat(prompt(problem.question + "\n(–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç)"));

        if (isNaN(userAnswer)) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
        } else if (Math.abs(userAnswer - problem.correctAnswer) < 0.0001) {
            alert("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç");
        } else {
            alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${problem.correctAnswer}`);
        }

        if (confirm("–•–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É?")) {
            startMathQuiz();
        } else {
            alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!");
        }
    }

// –ø–æ–µ—Ö–∞–ª–∏!!!
    startMathQuiz();
}